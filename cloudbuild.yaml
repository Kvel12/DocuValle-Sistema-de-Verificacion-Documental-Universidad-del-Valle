# cloudbuild.yaml con Gesti√≥n Segura de Secretos - DocuValle v3.1
steps:
  # PASO 1: Instalar dependencias del backend
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['ci']
    dir: 'backend'
    id: 'install-backend-deps'
    
  # PASO 2: Compilar el backend TypeScript a JavaScript
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'backend'
    id: 'build-backend'
    waitFor: ['install-backend-deps']
    
  # PASO 3: Construir la imagen Docker del backend
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/docuvalle-backend/backend:latest',
      './backend'
    ]
    id: 'build-docker-image'
    waitFor: ['build-backend']
    
  # PASO 4: Subir la imagen a Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/docuvalle-backend/backend:latest']
    id: 'push-docker-image'
    waitFor: ['build-docker-image']
    
  # PASO 5: Crear administrador de prueba (solo en desarrollo)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Configurando administrador de prueba..."
        
        # Solo ejecutar en desarrollo o cuando sea necesario
        if [ "${_ENVIRONMENT}" = "development" ] || [ "${_CREATE_TEST_ADMIN}" = "true" ]; then
          echo "üîß Creando administrador de prueba via API..."
          
          # Esperar a que el servicio est√© desplegado
          sleep 30
          
          # Intentar crear admin de prueba
          curl -X POST https://docuvalle-backend-166554040569.us-central1.run.app/api/admin/create-test-admin \
            -H "Content-Type: application/json" \
            || echo "‚ö†Ô∏è Admin de prueba ya existe o servicio no disponible a√∫n"
        else
          echo "üè≠ Entorno de producci√≥n - saltando creaci√≥n de admin de prueba"
        fi
    id: 'setup-test-admin'
    waitFor: ['push-docker-image']
    
  # PASO 6: Desplegar backend a Cloud Run con TODAS las variables
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'docuvalle-backend',
      '--image', 'us-central1-docker.pkg.dev/$PROJECT_ID/docuvalle-backend/backend:latest',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--port', '8080',
      '--memory', '1Gi',
      '--cpu', '1',
      '--min-instances', '0',
      '--max-instances', '10',
      '--timeout', '300',
      '--cpu-boost',
      '--set-env-vars', 'GEMINI_API_KEY=${_GEMINI_API_KEY},PROJECT_ID=$PROJECT_ID,JWT_SECRET=${_JWT_SECRET},NODE_ENV=${_NODE_ENV}',
      '--set-secrets', 'JWT_SECRET=docuvalle-jwt-secret:latest'
    ]
    id: 'deploy-backend'
    waitFor: ['setup-test-admin']
    
  # PASO 7: Ejecutar script post-deployment para inicializar datos
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîÑ Verificando y configurando datos iniciales..."
        
        # Esperar a que el servicio est√© completamente desplegado
        sleep 10
        
        # Verificar health del backend
        echo "üè• Verificando health del backend..."
        curl -f https://docuvalle-backend-166554040569.us-central1.run.app/api/health || {
          echo "‚ùå Backend no responde correctamente"
          exit 1
        }
        
        # Crear administrador de prueba si es necesario
        if [ "${_CREATE_TEST_ADMIN}" = "true" ]; then
          echo "üß™ Creando administrador de prueba..."
          curl -X POST https://docuvalle-backend-166554040569.us-central1.run.app/api/admin/create-test-admin \
            -H "Content-Type: application/json" \
            -w "Status: %{http_code}\n" || echo "‚ö†Ô∏è Error creando admin de prueba"
        fi
        
        # Migrar passwords si es necesario
        if [ "${_MIGRATE_PASSWORDS}" = "true" ]; then
          echo "üîë Ejecutando migraci√≥n de contrase√±as..."
          curl -X POST https://docuvalle-backend-166554040569.us-central1.run.app/api/admins/migrate-passwords \
            -H "Content-Type: application/json" \
            -w "Status: %{http_code}\n" || echo "‚ö†Ô∏è Error en migraci√≥n"
        fi
        
        echo "‚úÖ Configuraci√≥n post-deployment completada"
    id: 'post-deployment-setup'
    waitFor: ['deploy-backend']
    
  # PASO 8: Instalar dependencias del frontend
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['ci']
    dir: 'frontend'
    id: 'install-frontend-deps'
    
  # PASO 9: Construir el frontend con URL CORRECTA
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'frontend'
    id: 'build-frontend'
    waitFor: ['install-frontend-deps']
    env:
      - 'REACT_APP_API_URL=https://docuvalle-backend-166554040569.us-central1.run.app'
      - 'REACT_APP_PROJECT_ID=$PROJECT_ID'
      - 'REACT_APP_ENVIRONMENT=${_NODE_ENV}'
      
  # PASO 10: Desplegar frontend a Firebase Hosting
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîß Iniciando deployment del frontend..."
        
        # Instalar Firebase CLI globalmente
        npm install -g firebase-tools
        
        # Verificar que el build del frontend existe
        if [ ! -d "frontend/build" ]; then
          echo "‚ùå Error: directorio frontend/build no encontrado"
          ls -la frontend/
          exit 1
        fi
        
        echo "‚úÖ Frontend build encontrado, archivos:"
        ls -la frontend/build/
        
        # Verificar que firebase.json existe en la ra√≠z
        if [ ! -f "firebase.json" ]; then
          echo "‚ùå Error: firebase.json no encontrado en la ra√≠z"
          ls -la .
          exit 1
        fi
        
        # Configurar proyecto (no requiere autenticaci√≥n adicional)
        firebase use $PROJECT_ID --non-interactive
        
        # Desplegar usando las credenciales de Cloud Build
        firebase deploy --only hosting --project $PROJECT_ID --non-interactive
        
        echo "üéâ Frontend desplegado exitosamente a https://$PROJECT_ID.web.app"
    id: 'deploy-frontend'
    waitFor: ['build-frontend', 'post-deployment-setup']
    
  # PASO 11: Verificar deployment completo y configurar datos iniciales
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üéØ Verificaci√≥n final del deployment..."
        
        # Verificar backend
        echo "üîç Verificando backend..."
        BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://docuvalle-backend-166554040569.us-central1.run.app/api/health)
        if [ "$BACKEND_STATUS" = "200" ]; then
          echo "‚úÖ Backend funcionando correctamente"
        else
          echo "‚ö†Ô∏è Backend respondi√≥ con c√≥digo: $BACKEND_STATUS"
        fi
        
        # Verificar frontend
        echo "üîç Verificando frontend..."
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$PROJECT_ID.web.app)
        if [ "$FRONTEND_STATUS" = "200" ]; then
          echo "‚úÖ Frontend funcionando correctamente"
        else
          echo "‚ö†Ô∏è Frontend respondi√≥ con c√≥digo: $FRONTEND_STATUS"
        fi
        
        echo ""
        echo "üéâ ============================================"
        echo "üéâ DOCUVALLE DESPLEGADO EXITOSAMENTE!"
        echo "üéâ ============================================"
        echo "üñ•Ô∏è  Backend: https://docuvalle-backend-166554040569.us-central1.run.app"
        echo "üåê Frontend: https://$PROJECT_ID.web.app"
        echo "üè• Health Check: https://docuvalle-backend-166554040569.us-central1.run.app/api/health"
        echo ""
        echo "üîê Credenciales de prueba:"
        echo "   Email: admin@example.com"
        echo "   Password: 1234"
        echo "üéâ ============================================"
    id: 'verify-deployment'
    waitFor: ['deploy-frontend']

# Configuraci√≥n de secretos disponibles
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/docuvalle-jwt-secret/versions/latest
    env: 'JWT_SECRET'

# Configuraci√≥n adicional
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
timeout: '2400s'  # 40 minutos para dar tiempo a todas las operaciones

# Variables de sustituci√≥n - CONFIGURAR EN LA CONSOLA DE CLOUD BUILD
substitutions:
  _SERVICE_NAME: 'docuvalle-backend'
  _REGION: 'us-central1'
  _GEMINI_API_KEY: 'AIzaSyCZTmjN7HhG-sV42CnPoCh6CeAHoC_ltw4'
  _JWT_SECRET: 'docuvalle-jwt-secret-production-2024'  # Se sobrescribe en la consola
  _NODE_ENV: 'production'  # development | production
  _ENVIRONMENT: 'production'  # development | production  
  _CREATE_TEST_ADMIN: 'true'  # true | false
  _MIGRATE_PASSWORDS: 'true'  # true | false
